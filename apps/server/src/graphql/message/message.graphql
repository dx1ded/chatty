interface Message {
  id: ID!
  author: User!
  chat: Chat!
  timeStamp: Date!
  read: Boolean!
}

type TextMessage implements Message {
  id: ID!
  author: User!
  chat: Chat!
  timeStamp: Date!
  read: Boolean!
  text: String!
}

type VoiceMessage implements Message {
  id: ID!
  author: User!
  chat: Chat!
  timeStamp: Date!
  read: Boolean!
  voiceUrl: String!
}

type PictureMessage implements Message {
  id: ID!
  author: User!
  chat: Chat!
  timeStamp: Date!
  read: Boolean!
  imageUrl: String!
}

union UMessage = TextMessage | VoiceMessage | PictureMessage

type Query {
  messages(chatId: ID!, take: Int, skip: Int): [Message!]
}

type Mutation {
  createTextMessage(message: TextMessageInput!): TextMessage
  createVoiceMessage(message: VoiceMessageInput!): VoiceMessage
  createPictureMessage(message: PictureMessageInput!): PictureMessage
}

type Subscription {
  newMessage(userId: ID!): UMessage!
}

input MessageInput {
  chat: ID!
}

input TextMessageInput {
  meta: MessageInput!
  text: String!
}

input VoiceMessageInput {
  meta: MessageInput!
  voiceUrl: String!
}

input PictureMessageInput {
  meta: MessageInput!
  imageUrl: String!
}
